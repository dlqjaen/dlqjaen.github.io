{"componentChunkName":"component---src-components-posting-tsx","path":"/posting/threejs-journey-06-animation","result":{"data":{"markdownRemark":{"html":"<p><a href=\"https://threejs-journey.xyz/lessons/6\">Link</a></p>\n<ul>\n<li><code>window.requestAnimationFrame</code>을 이용하여 한 프레임 단위로 오브젝트를 움직이고 화면을 랜더링한다.</li>\n<li>위 작업을 반복하게되면 프레임단위로 오브젝트가 움직이는 것 처럼 느껴지며 우리는 애니메이션이 적용되었다고 한다.</li>\n<li>이 처럼 한 프레임 단위를 <code>tick</code> 이라고 합니다.</li>\n</ul>\n<pre><code class=\"language-javascript\">const tick = () => { window.requestAnimationFrame(tick) }\ntick()\n</code></pre>\n<p>위 코드처럼 <code>tick</code> 을 실행하게되면 한 틱단위로 <code>tick</code> 함수가 무한히 반복 되는 것을 알 수 있습니다.</p>\n<pre><code class=\"language-javascript\">const tick = () => {\n  renderer\n}\n</code></pre>\n<pre><code class=\"language-javascript\">import './style.css'\nimport * as THREE from 'three'\nimport gsap from 'gsap'\n\n// Canvas\nconst canvas = document.querySelector('canvas.webgl')\n\n// Scene\nconst scene = new THREE.Scene()\n\n// Object\nconst geometry = new THREE.BoxGeometry(1, 1, 1)\nconst material = new THREE.MeshBasicMaterial({ color: 0xff0000 })\nconst mesh = new THREE.Mesh(geometry, material)\nscene.add(mesh)\n\n// Sizes\nconst sizes = {\n    width: 800,\n    height: 600\n}\n\n// Camera\nconst camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height)\ncamera.position.z = 3\nscene.add(camera)\n\n// Renderer\nconst renderer = new THREE.WebGLRenderer({\n    canvas: canvas\n})\nrenderer.setSize(sizes.width, sizes.height)\nrenderer.render(scene, camera)\n\nconst clock = new THREE.Clock()\n\n// let time = Date.now()\n\ngsap.to(mesh.position, {duration: 1, delay: 1, x: 2})\ngsap.to(mesh.position, {duration: 1, delay: 2, x: 0})\n\nconst tick = () => {\n    /*\n        //timestamp\n        const currentTime = Date.now()\n        const deltaTime = currentTime - time\n        time = currentTime\n\n        mesh.rotation.y += 0.001 * deltaTime\n    */\n\n        const elapsedTime = clock.getElapsedTime()\n        console.log('@@@@@@@@-----------elapsedTime', elapsedTime);\n    camera.position.x = Math.cos(elapsedTime)\n    camera.position.y = Math.sin(elapsedTime)\n    camera.lookAt(mesh.position)\n\n    renderer.render(scene, camera)\n    window.requestAnimationFrame(tick)\n}\n\ntick()\n</code></pre>","frontmatter":{"date":"2021-05-06","path":"/posting/threejs-journey-06-animation","title":"threejs-journey 06-Animation","description":"three.js를 이용한 애니메이션효과 적용","tags":["three.js"]}}},"pageContext":{"pagePath":"/posting/threejs-journey-06-animation"}},"staticQueryHashes":["3454785627","63159454","987710685"]}