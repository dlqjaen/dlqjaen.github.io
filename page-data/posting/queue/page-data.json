{"componentChunkName":"component---src-components-posting-tsx","path":"/posting/queue","result":{"data":{"markdownRemark":{"html":"<h1>큐 (Queue)</h1>\n<ul>\n<li>데이터를 넣을 수 있는 <code>선형구조</code></li>\n<li>먼저 넣은 데이터가 먼저 나오는 <code>FIFO(First In First Out)</code></li>\n<li>데이터를 집어넣는 <code>enqueue</code></li>\n<li>데이터를 추출하는 <code>dequeue</code></li>\n<li>현재 데이터가 큐에 존재하는지 확인하는 <code>contains</code></li>\n<li>스택의 총 크기를 반환하는 <code>size</code></li>\n</ul>\n<h2>구현</h2>\n<pre><code class=\"language-javascript\">class Queue {\n  constructor() {\n    this.array = []\n  }\n\n  enqueue(value) {\n    this.array.push(value)\n  }\n\n  dequeue() {\n    this.array.shift()\n  }\n\n  contains(value) {\n    return this.array.some(item => item === value)\n  }\n\n  size() {\n    return this.array.length\n  }\n}\n\nconst instance = new Queue()\n\ninstance.enqueue(1)\ninstance.array // [1]\n\ninstance.enqueue(2)\ninstance.array // [1, 2]\n\ninstance.enqueue(4)\ninstance.array // [1, 2, 4]\n\ninstance.dequeue()\ninstance.array // [2, 4]\n\ninstance.contains(1) // false\ninstance.contains(2) // true\n\ninstance.size() // 2\n</code></pre>\n<p><code>Queue</code>는 <code>순서대로</code> 처리 되어야 하는 작업의 <code>버퍼(임시저장)</code>로 많이 사용</p>","frontmatter":{"date":"2020-04-24","path":"/posting/queue","title":"큐","description":"데이터를 넣을 수 있는 선형구조, 먼저 넣은 데이터가 먼저 나오는 FIFO(First In First Out)","tags":["JS","dataStructure"]}}},"pageContext":{"pagePath":"/posting/queue"}},"staticQueryHashes":["3454785627","63159454","987710685"]}