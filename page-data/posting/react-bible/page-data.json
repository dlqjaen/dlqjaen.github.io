{"componentChunkName":"component---src-components-posting-tsx","path":"/posting/react-bible","result":{"data":{"markdownRemark":{"html":"<h3>1장</h3>\n<p>React.createElement(elementName, data, child)</p>\n<p>elementName: HTML태그명, 직접 만든 컴포넌트 클래스</p>\n<p>data: 속성, 상위 컴포넌트로 부터 받는 값</p>\n<p>child: 자식 엘리먼트, 내부 텍스트</p>\n<h3>2장</h3>\n<p>createElement로 다중 커스텀 엘리먼트 붙이기</p>\n<pre><code class=\"language-javascript\">var h1 = React.createElement('h1', null, 'test')\nReact.createElement('dev', null, h1, h1)\n</code></pre>\n<p>새로운 컴포넌트 클래스는 구현할 때 <code>render()</code> 매서드를 반드시 포함해야 한다.</p>\n<p>속성값을 넘기면 <code>this.props</code> 로 데이터를 받아서 사용할 수 있다.</p>\n<pre><code class=\"language-javascript\">class HelloWorld extends React.Component {\n  render() {\n    return React.createElement('dev', null, h1, h2,\n      React.createElement('h3', this.props, this.props.title)\n    )\n  }\n}\nReactDOM.render(\n  React.createElement(HelloWorld, {title: 'test'}),\n  document.getElementById('content')\n)\n</code></pre>\n<h3>3장</h3>\n<p><code>React.createElement('h1', null, '')</code> 대신 <code>React.Dom.h1(null, '')</code> 을 이용할 수 있다.</p>\n<p>바벨만 설치해서 jsx파일을 js파일로 변환할 수 있다.</p>\n<pre><code class=\"language-bash\">$ ./node_modules/.bin/babel js/script.jsx -o js/script.js\n</code></pre>\n<p>HTML과 JSX의 다른 점</p>\n<ul>\n<li>JSX에서 단일 태그에는 <code>/</code> 를 반드시  포홤되어야한다.</li>\n<li>위험한 HTML 구문에 ㄷ해 자동으로 이스케이프 처리한다.</li>\n<li>\n<p>특수문자 표시방법</p>\n<ul>\n<li>\n<pre><code class=\"language-jsx\">&#x3C;span>{[&#x3C;span key=\"specialChars\">&#x26;copy;&#x26;mdash;&#x26;ldquo;&#x3C;span>]}&#x3C;/span>\n</code></pre>\n</li>\n<li>소스 코드에 특수문자를 직접 복사해서 넣는다. (UTF-8 문자셋)</li>\n<li><code>String.fromCharCde(charCodeNumber)</code> 를 이용ㅎ서 유니코드 문자로 번호에서 문자로 변경</li>\n</ul>\n</li>\n</ul>\n<p>class -> className</p>\n<p>for -> htmlFor</p>","frontmatter":{"date":"2021-04-09","path":"/posting/react-bible","title":"리액트 교과서","description":"코로나 격리기간 동안 공부","tags":["React"]}}},"pageContext":{"pagePath":"/posting/react-bible"}},"staticQueryHashes":["3454785627","63159454","987710685"]}