{"componentChunkName":"component---src-components-posting-tsx","path":"/posting/threejs-journey-05-transfrom-objects","result":{"data":{"markdownRemark":{"html":"<p><a href=\"https://threejs-journey.xyz/lessons/3\">Link</a></p>\n<ul>\n<li>04강의에서 webpack을 이용하여 three.js를 연결하도록 했었다.(04강 Webpack설정은 따로 정리하지 않음.)</li>\n<li></li>\n</ul>\n<pre><code class=\"language-javascript\">import './style.css'\nimport * as THREE from 'three'\n\nconst scene = new THREE.Scene()\nconst geometry = new THREE.BoxGeometry(1, 1, 1)\nconst material = new THREE.MeshBasicMaterial({ color: 0xff00000 })\nconst mesh = new THREE.Mesh(geometry, material)\nscene.add(mesh)\n\nconst geometry2 = new THREE.BoxGeometry(1, 1, 1)\nconst material2 = new THREE.MeshBasicMaterial({ color: 'blue' })\nconst mesh2 = new THREE.Mesh(geometry2, material2)\nmesh2.position.x = 1\nmesh2.position.y = 2\nmesh2.position.z = 2\nscene.add(mesh2)\n\nconst sizes = {\n  width: 800,\n  height: 600\n}\nconst camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height)\ncamera.position.z = 3\ncamera.position.x = 0\ncamera.position.y = 0\ncamera.lookAt(new THREE.Vector3(0, -1, 0))\nscene.add(camera)\n\nmesh.position.set(0.7, -0.6, 1)\nconsole.log(mesh.position.normalize())\nconsole.log(mesh.position.distanceTo(camera.position))\n\nconst axesHelper = new THREE.AxesHelper(2)\nscene.add(axesHelper)\n\n// mesh.scale.x = 2\n// mesh.scale.y = 0.25\n// mesh.scale.z = 0.5\n\nmesh.rotation.reorder('YXZ')\nmesh.rotation.y = Math.PI * 0.25\nmesh.rotation.x = Math.PI * 0.25\n\nconst group = new THREE.Group()\ngroup.scale.y = 2\ngroup.rotation.y = 0.2\ngroup.position.x = 1\n// scene.add(group)\n\nconst cube1 = new THREE.Mesh(\n    new THREE.BoxGeometry(1, 1, 1),\n    new THREE.MeshBasicMaterial({ color: 'yellow' })\n)\ncube1.position.x = -1.5\ngroup.add(cube1)\n\nconst cube2 = new THREE.Mesh(\n    new THREE.BoxGeometry(1, 1, 1),\n    new THREE.MeshBasicMaterial({ color: 'green' })\n)\ncube2.position.x = 0\ngroup.add(cube2)\n\nconst cube3 = new THREE.Mesh(\n    new THREE.BoxGeometry(1, 1, 1),\n    new THREE.MeshBasicMaterial({ color: 'blue' })\n)\ncube3.position.x = 1.5\ngroup.add(cube3)\n\nconst canvas = document.querySelector('canvas.webgl')\n\nconst renderer = new THREE.WebGLRenderer({ canvas })\nrenderer.setSize(sizes.width, sizes.height)\nrenderer.render(scene, camera)\n</code></pre>\n<h2>스터디 내용</h2>\n<ul>\n<li>이번 강의의 중심은 여러 mesh를 묶은 하나의 그룹을 만들 수 있다는 것 같았다.</li>\n<li>또 다른 내용은 rotaion과 <a href=\"https://threejs.org/docs/#api/en/math/Quaternion\">Quaternion</a> 을 이용한 회전이었는데, rotaion은 x, y, z축 중 어떤 축을 먼저 회전시키냐에 따라서 나머지 축도 영향을 받게되는데 Quaternion은 축변환이 없이 회전시킬 수 있으나 수학적 공식이 필요하고 어려워 나중에 다룬다고 한다.(정말?)</li>\n<li>position은 <a href=\"https://threejs.org/docs/#api/en/math/Vector3\">Vector3</a> 클래스 의 인스턴스라고 했는데  Vector3에 대해 좀 더 공부해볼 필요가 있을 것 같다.</li>\n<li><code>AxesHelper</code>를 이용하면 중심을 표시 할 수 있다. (3강 스터디때 필요성을 언급)</li>\n</ul>","frontmatter":{"date":"2021-05-02","path":"/posting/threejs-journey-05-transfrom-objects","title":"threejs-journey 05-transform-objects","description":"three.js를 이용한 물체의 이동, 크기변화, 그룹화를 연습해보자!","tags":["three.js"]}}},"pageContext":{"pagePath":"/posting/threejs-journey-05-transfrom-objects"}},"staticQueryHashes":["3454785627","63159454","987710685"]}