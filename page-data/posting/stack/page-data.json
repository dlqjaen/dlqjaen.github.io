{"componentChunkName":"component---src-components-posting-tsx","path":"/posting/stack","result":{"data":{"markdownRemark":{"html":"<h1>스택 (Stack)</h1>\n<ul>\n<li>데이터를 넣을 수 있는 <code>선형구조</code></li>\n<li>나중에 넣은 데이터가 먼저 나오는 <code>LIFO(Last In First Out)</code></li>\n<li>데이터를 집어넣는 <code>push</code></li>\n<li>데이터를 추출하는 <code>pop</code></li>\n<li>마지막 데이터를 확인하는 <code>peek</code></li>\n<li>현재 데이터가 스택에 존재하는지 확인하는 <code>contains</code></li>\n<li>스택의 총 크기를 반환하는 <code>size</code></li>\n</ul>\n<h2>구현</h2>\n<pre><code class=\"language-javascript\">class Stack {\n  constructor() {\n    this.array = []\n  }\n\n  push(value) {\n    this.array.push(value)\n  }\n\n  pop() {\n    this.array.pop()\n  }\n\n  peek() {\n    return this.array[this.array.length - 1]\n  }\n\n  contains(value) {\n    return this.array.some(item => item === value)\n  }\n\n  size() {\n    return this.array.length\n  }\n}\n\nconst instance = new Stack()\n\ninstance.push(1)\ninstance.array // [1]\n\ninstance.push(2)\ninstance.array // [1, 2]\n\ninstance.push(4)\ninstance.array // [1, 2, 4]\n\ninstance.pop()\ninstance.array // [1, 2]\ninstance.peek() // 2\n\ninstance.contains(4) // false\ninstance.contains(2) // true\n\ninstance.size() // 2\n</code></pre>\n<p><code>Stack</code>은 <code>서로 연관되어있는</code> 작업을 연달아 수행하면서 <code>이전에 작업했던 값을 기억</code>할 필요가 있을 때 많이 사용</p>","frontmatter":{"date":"2021-04-24","path":"/posting/stack","title":"스택","description":"데이터를 넣을 수 있는 선형구조, 나중에 넣은 데이터가 먼저 나오는 LIFO(Last In First Out)","tags":["JS","dataStructure"]}}},"pageContext":{"pagePath":"/posting/stack"}},"staticQueryHashes":["3454785627","63159454","987710685"]}