{"componentChunkName":"component---src-components-posting-tsx","path":"/posting/programmers-function-implementation","result":{"data":{"markdownRemark":{"html":"<pre><code class=\"language-javascript\">function solution(skillBuild, userSkillTrees) {\n    let count = 0\n    \n    for (let userSkill of userSkillTrees) {\n        let lastIndex = null\n        \n        for (let skill of skillBuild) {\n            let findIndex = userSkill.indexOf(skill)\n\n            if ((lastIndex === -1) &#x26;&#x26; (findIndex !== -1)) { break }\n            if ((lastIndex !== -1) &#x26;&#x26; (findIndex !== -1) &#x26;&#x26; (lastIndex > findIndex)) { break }\n            if (skillBuild[skillBuild.length -1] === skill) {\n                count += 1\n                break\n            }\n            lastIndex = findIndex\n        }\n    }\n    \n    return count\n}\n</code></pre>\n<h3>문제풀이 생각</h3>\n<ol>\n<li>주어진 스킬트리를 순회하면서 주어진 스킬에 해당하는 인덱스를 저장한다.</li>\n<li>선행 스킬을 배우지 않은 스킬트리로 카운트를 쌓지 않는다.\n(저장된 이전 스킬 인덱스가 -1이고 현재 스킬 인덱스가 -1이 아닌 경우)</li>\n<li>선행 스킬이 나중에 배우게 되면 카운트를 쌓지 않는다.\n(저장된 이전 스킬 인덱스가 -1이 아니고 현재 스킬 인덱스가 -1이 아니면서 저장된 이전 스킬의 인덱스가 현재 스킬 인덱스보다 값이 클 경우)</li>\n<li>조건을 다 거치고 마지막 확인이 된 경우 카운트 하나 쌓는다.</li>\n<li>카운트를 반환한다.</li>\n</ol>\n<h3>다른 사람의 풀이 (<strong>iRequestUResponse , milliwonaire , 박하영</strong>)</h3>\n<pre><code class=\"language-javascript\">function solution(skill, skill_trees) {\n    function isCorrect(n) {\n        // const test = '[' + 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('').filter(v => !skill.includes(v)).join('') + ']*';\n        let test = skill.split('');\n        for (var i = 0; i &#x3C; n.length; i++) {\n            if (!skill.includes(n[i])) continue;\n            if (n[i] === test.shift()) continue;\n            return false;\n        }\n        return true;\n    }    \n\n    return skill_trees.filter(isCorrect).length;\n}\n</code></pre>\n<h3>알게된 점</h3>\n<ol>\n<li>조건에 충족하지 못하는 것을 거르는 방식으로 생각했지만 조건을 충족하는 방식으로도 생각해볼 수 있구나</li>\n<li>Array.prototype.includes 를 이용해보자</li>\n<li>Array.prototype.shift 를 이용해보자</li>\n</ol>","frontmatter":{"date":"2021-04-08","path":"/posting/programmers-function-implementation","title":"프로그래머스 - 기능개발","description":"먼저 배포되어야 하는 순서대로 작업의 진도가 적힌 정수 배열 progresses와 각 작업의 개발 속도가 적힌 정수 배열 speeds가 주어질 때 각 배포마다 몇 개의 기능이 배포되는지를 return 하도록 solution 함수를 완성하세요.","tags":["JS","Algorithm"]}}},"pageContext":{"pagePath":"/posting/programmers-function-implementation"}},"staticQueryHashes":["3454785627","63159454","987710685"]}