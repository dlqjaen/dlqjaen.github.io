{"componentChunkName":"component---src-components-posting-tsx","path":"/posting/tree","result":{"data":{"markdownRemark":{"html":"<h1>트리 (Tree)</h1>\n<ul>\n<li>여러 데이터가 <code>계층 구조</code>에서 <code>연결</code>을 가질때 사용</li>\n</ul>\n<h2>용어</h2>\n<ul>\n<li><code>노드</code>: 트리 안의 값 하나</li>\n<li><code>자식 노드</code>: 노드의 바로 한 단계 아래에 연결된 노드로 노드는 여러개의 자식노드를 가질 수 있음</li>\n<li><code>부모 노드</code>: 노드의 바로 한 단계 위에 연결된 노드</li>\n<li><code>뿌리 노드</code>: 트리의 최상단에 위치한 노드, 그렇기에 뿌리 노드는 부모 노드가 없음</li>\n<li><code>잎 노드</code>: 자식 노드가 없는 노드</li>\n<li><code>조상 노드</code>: 노드와 연결되어있는 모든 상위 노드</li>\n<li><code>자손 노드</code>: 노드와 연결되어있는 모든 하위 노드</li>\n<li><code>형제 노드</code>: 노드와 같은 부모 노드를 가지는 동일한 위치에 존재하는 노드</li>\n</ul>\n<h2>구현</h2>\n<pre><code class=\"language-javascript\">class Node {\n  constructor(node, childNode = []) {\n    this.node = node\n    this.childNode = childNode\n  }\n}\n\nconst tree = new Node(1, [\n  new Node(2),\n  new Node(3, [\n    new Node(4)\n  ])\n])\n\nconsole.log(tree)\n/*\n   1\n   /\\\n  2  3\n      \\\n       4\n*/\n</code></pre>\n<p><code>Tree</code>는 <code>계층구조</code>를 표현하거나 계층구조를 이용한 <code>알고리즘의 효율</code>을 높일 때 사용</p>","frontmatter":{"date":"2021-04-24","path":"/posting/tree","title":"트리","description":"여러 데이터가 계층 구조에서 연결을 가질때 사용하며 계층구조를 표현하거나 계층구조를 이용한 알고리즘의 효율을 높일 때 사용","tags":["JS","dataStructure"]}}},"pageContext":{"pagePath":"/posting/tree"}},"staticQueryHashes":["3454785627","63159454","987710685"]}