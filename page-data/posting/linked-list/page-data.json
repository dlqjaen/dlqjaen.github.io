{"componentChunkName":"component---src-components-posting-tsx","path":"/posting/linked-list","result":{"data":{"markdownRemark":{"html":"<h1>연결리스트 (Linked List)</h1>\n<ul>\n<li>떨어져있는 데이터를 연결해서 관리하는 데이터 구조</li>\n<li>데이터를 저장할 공간을 미리 만들지 않아도 되지만 연결을 위한 별도의 공간이 필요하므로 저장 효율이 좋지는 않음</li>\n<li>연결 정보를 찾는 시간이 필요하여 접근 속도가 느림</li>\n<li>중간에 존재하는 데이터를 제거할 시 앞 뒤의 데이터를 재구성해야하는 부가작업이 필요</li>\n</ul>\n<h2>용어</h2>\n<ul>\n<li>노드: 데이터 저장 단위로 데이터값과 포인터로 이루어져있다.</li>\n<li>포인터: 노드안에서 이저 혹은 다음 노드의 연결정보를 가지는 공간</li>\n</ul>\n<h2>구현</h2>\n<pre><code class=\"language-javascript\">class Node {\n  constructor(data) {\n    this.data = data\n    this.next = null\n  }\n}\n\nclass LinkedList {\n  constructor(data) {\n    this.node = new Node(data)\n  }\n  getList() {\n    let pointer = this.node\n    let list = []\n    while (pointer) {\n      list.push(pointer.data)\n      pointer = pointer.next\n    }\n    return list\n  }\n  add(data) {\n    if (this.node === null) {\n      this.node = new Node(data)\n    } else {\n      let pointer = this.node\n      while (pointer.next) {\n        pointer = pointer.next\n      }\n      pointer.next = new Node(data)\n    }\n  }\n  delete(data) {\n    if (this.node === null) { return }\n    if (this.node.data === data) {\n      this.node = this.node.next\n    } else {\n      let pointer = this.node\n      while (pointer.next) {\n        pointer.next.data === data ? pointer.next = pointer.next.next : pointer = pointer.next\n      }\n    }\n  }\n  isExistData(data) {\n    let pointer = this.node\n    while (pointer) {\n      if (pointer.data === data) { return true }\n      else { pointer = pointer.next }\n    }\n    return false\n  }\n}\n\nconst instance = new LinkedList(0)\ninstance.getList() // [0]\ninstance.add(2)\ninstance.getList() // [0, 2]\ninstance.delete(0)\ninstance.isExistData(0) // false\ninstance.isExistData(2) // true\ninstance.getList() // [2]\n</code></pre>\n<p><code>Linked List</code> 의 경우 다른 자료구조를 표현할 때 많이 사용된다.</p>\n<h2>의문</h2>\n<ul>\n<li>인스턴스 생성시 초기 데이터값을 주지 않으면 <code>첫째 Node</code>의 <code>data</code>값이 <code>undefined</code>가 되는데 이게 맞나?</li>\n<li>중간 데이터를 제거하면 제거한 데이터의 이전 데이터에서 다음으로 갈 pointer 주소만 다다음 데이터로 바꿔주는 것이라 제거되어야할 데이터 공간은 그대로 있기에 공간 낭비가 아닌가?</li>\n</ul>","frontmatter":{"date":"2021-05-05","path":"/posting/linked-list","title":"연결리스트","description":"떨어져있는 데이터를 연결해서 관리하는 데이터 구조 Linked List의 경우 다른 자료구조를 표현할 때 많이 사용된다.","tags":["JS","dataStructure"]}}},"pageContext":{"pagePath":"/posting/linked-list"}},"staticQueryHashes":["3454785627","63159454","987710685"]}