<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="artemsheludko.pw/feed.xml" rel="self" type="application/atom+xml" /><link href="artemsheludko.pw/" rel="alternate" type="text/html" /><updated>2017-09-21T01:30:25+09:00</updated><id>artemsheludko.pw/</id><title type="html">Beomdus’s Blog</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</subtitle><entry><title type="html">Image Sprite</title><link href="artemsheludko.pw/Image-Sprite/" rel="alternate" type="text/html" title="Image Sprite" /><published>2017-09-19T10:25:43+09:00</published><updated>2017-09-19T10:25:43+09:00</updated><id>artemsheludko.pw/Image-Sprite</id><content type="html" xml:base="artemsheludko.pw/Image-Sprite/">&lt;p&gt;웹의 성능을 향상시키는 방법은 여러가지가 있지만 웹 사이트에서 빠질 수 없는 이미지를 불러오는 방식에서도 웹 성능을 향상시킬 수 있습니다.&lt;/p&gt;

&lt;p&gt;그 방법이 Image Sprite기법입니다.&lt;/p&gt;

&lt;h3 id=&quot;image-sprite-기법&quot;&gt;Image Sprite 기법&lt;/h3&gt;
&lt;p&gt;Image Sprtite 기법은 웹에서 자주쓰이는 이미지들을 하나의 큰 이미지(배경이 투명한 이미지)에 필요한 이미지들을 모아 딱 한 번만 이미지를 불러온 후 background-image, background-position 속성을 이용해서 필요한 곳에 필요한 이미지의 부분만 보여주는 방식을 말 합니다.&lt;/p&gt;

&lt;p&gt;매번 이미지들을 불러왔을 경우 이미지들을 계속 다운받아 화면에 출력해야 하기에 이미지를 다운로드 하는 시간 + 화면에 출력하는 시간이 걸리지만 Image Sprite 기법을 사용했을 경우에는 웹사이트 초기 로딩시 한 번만 다운받아 이미지를 사용하기에 웹 로딩이 생기지 않습니다.&lt;/p&gt;

&lt;p&gt;또 한정된 자원을 사용해야하는 모바일 환경에서 Image Sprite기법은 웹 페이지 로딩시간을 단축시켜줍니다.&lt;/p&gt;

&lt;h3 id=&quot;image-sprite를-도와주는-도구&quot;&gt;Image Sprite를 도와주는 도구&lt;/h3&gt;
&lt;p&gt;Image Sprite기법을 사용하기 위해선 일일이 그래픽 프로그램에서 여러 개의 그림을 하나의 이미지로 합쳐야 하고 실제 웹에서 CSS 적용을 위한 그림의 좌표값을 얻기란 번거로울 수가 있습니다.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;그래서, 이런 작업을 자동화해주는 도구들이 개발돼서 한둘씩 생겨나고 있는데, 대표적으로 Website Performance&lt;/td&gt;
      &lt;td&gt;CSS Sprite Generator가 있습니다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;이곳에서는 이미지들을 하나로 묶은 압축 파일(zip)을 올려놓으면 약간의 설정만으로 Sprite 이미지와 함께 CSS 적용 rule까지 한꺼번에 얻을 수 있어서 편합니다.&lt;/p&gt;

&lt;h3 id=&quot;참고&quot;&gt;참고&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://windtale.net/blog/css-image-sprite-automation-with-grunt-spritesmith/&quot; target=&quot;_blank&quot;&gt;CSS 이미지 스프라이트 자동화 (With Grunt-spritesmith)&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">웹의 성능을 향상시키는 방법은 여러가지가 있지만 웹 사이트에서 빠질 수 없는 이미지를 불러오는 방식에서도 웹 성능을 향상시킬 수 있습니다.</summary></entry><entry><title type="html">동기 통신 VS 비동기 통신</title><link href="artemsheludko.pw/Sync-VS-Async/" rel="alternate" type="text/html" title="동기 통신 VS 비동기 통신" /><published>2017-09-19T10:25:43+09:00</published><updated>2017-09-19T10:25:43+09:00</updated><id>artemsheludko.pw/Sync-VS-Async</id><content type="html" xml:base="artemsheludko.pw/Sync-VS-Async/">&lt;p&gt;자바스크립트는 싱글 스레드로 동작하기 때문에 기본적으로 동기방식의 진행을 하게됩니다. 하지만 바닐라 자바스크립트자체도 무거워지면서 비동기 방식의 통신을 따로 구현해야 할 상황이 되었습니다.&lt;/p&gt;

&lt;h3 id=&quot;동기통신sync&quot;&gt;동기통신(Sync)&lt;/h3&gt;
&lt;p&gt;동기통신은 일정신호를 전달한 후 전달된 신호의 답신이 오면 다음 신호를 전달하는 식의 통신으로 작업이 들어온 순서에 맞게 하나씩 진행됩니다.&lt;/p&gt;

&lt;p&gt;또 동기 통신은 순서에 맞게 빨리빨리 진행되는 장점이 있지만, 여러 가지의 일을 동시에 처리할 수 없다는 단점이 있습니다. 이런 불편한 점으로인해 비동기통신방식이 만들어졌다고 할 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;비동기통신async&quot;&gt;비동기통신(Async)&lt;/h3&gt;
&lt;p&gt;비동기통신은 통신이 시작되면 한번에 모든 신호를 다 보내고 그 결과값을 받아 함수(콜백함수)를 실행시킵니다.&lt;/p&gt;

&lt;p&gt;그렇기 때문에 비동기통신 방식은 여러일을 동시에 처리할 수 있지만, 동기통신 방식보다 속도가 느릴 수 있습니다.&lt;/p&gt;

&lt;p&gt;상황에 따라서는 콜백함수들이 하나씩 늘어나면서 코드를 알아보기 힘들어지거나 코드 유지, 보수가 힘들어지기도 합니다.
이런 점을 해결하기위해서 콜백함수를 패키지로 묶는 작업을 하게되고 Promise가 탄생하게 됩니다.&lt;/p&gt;

&lt;h3 id=&quot;참고&quot;&gt;참고&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/demun/FrontEndStudy/raw/master/document/Javascript/images/seongeun_01.jpg&quot; alt=&quot;동기통신과 비동기통신을 설명한 그림&quot; target=&quot;_blank&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">자바스크립트는 싱글 스레드로 동작하기 때문에 기본적으로 동기방식의 진행을 하게됩니다. 하지만 바닐라 자바스크립트자체도 무거워지면서 비동기 방식의 통신을 따로 구현해야 할 상황이 되었습니다.</summary></entry><entry><title type="html">DOM VS Virtual-DOM</title><link href="artemsheludko.pw/DOM-VS-Virtual-DOM/" rel="alternate" type="text/html" title="DOM VS Virtual-DOM" /><published>2017-09-18T10:12:43+09:00</published><updated>2017-09-18T10:12:43+09:00</updated><id>artemsheludko.pw/DOM-VS-Virtual-DOM</id><content type="html" xml:base="artemsheludko.pw/DOM-VS-Virtual-DOM/">&lt;p&gt;jQuery와 Vue.js의 차이점 중 하나였던 돔(DOM)과 가상돔(Vuertual DOM)이 뭔지 알아보도록 하겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;domdocument-object-model&quot;&gt;DOM(Document Object Model)&lt;/h3&gt;
&lt;p&gt;DOM은 HTML 문서의 요소들에 접근하는 방법을 제공해주는 API입니다.&lt;/p&gt;

&lt;p&gt;window 객체의 document 프로퍼티를 통해서 DOM을 사용할 수 있으며 HTML의 요소들을 생성, 선택, 수정, 삭제를 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;아래 이미지는 DOM Tree입니다.
웹페이지가 요청되면 DOM이 제일 먼저 document객체를 통해 html객체를 생성하고 head객체와 body객체를 생성하는 순서로 트리구조를 만들어가는 것을 보여줍니다.
&lt;img src=&quot;http://pautasso.info/lectures/w13/sa3/3-js/img/dom-tree.svg&quot; alt=&quot;Dom Tree&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;dom의-문제점&quot;&gt;DOM의 문제점&lt;/h4&gt;
&lt;p&gt;이런 DOM에는 치명적인 문제점이 있습니다.&lt;/p&gt;

&lt;p&gt;DOM의 Document로 생성된 html요소들의 스타일이 변경되면 html객체부터 다시 생성하기 시작합니다. 그렇기 때문에 스타일 하나가 적용되기까지는 시간이 많이 걸립니다.(속도가 느리다)&lt;/p&gt;

&lt;p&gt;SPA(Single Page Application)의 사이트인 경우에는 DOM 트리의 크기는 엄청나게 클 것이고 동적으로 변해야하는 UI들을 감당하게 벅찰 것입니다.&lt;/p&gt;

&lt;p&gt;이런 문제점을 해결하고자 나온 방법이 Virtual DOM을 사용하는 것입니다.&lt;/p&gt;

&lt;h3 id=&quot;virtual-domdocument-object-model&quot;&gt;Virtual DOM(Document Object Model)&lt;/h3&gt;
&lt;p&gt;Virtual DOM은 실제 DOM을 가볍게하여 따로 복사해놓는 추상화된 돔입니다.&lt;/p&gt;

&lt;p&gt;Virtual DOM은 요소의 스타일이 변경되면 변경되기 전의 추상화된 돔과 변경 후의 추상화된 돔을 비교하여 바뀐 부분만을 찾아 실제돔에 적용을 시킵니다.&lt;/p&gt;

&lt;p&gt;그렇기 때문에 속도가 월등히 빠릅니다.&lt;/p&gt;

&lt;h4 id=&quot;virtual-dom-사용하는-프레임워크&quot;&gt;Virtual DOM 사용하는 프레임워크&lt;/h4&gt;
&lt;p&gt;이런 Virtual DOM을 사용하는 프레임워크는 Vue.js, React가 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;참고&quot;&gt;참고&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://webframeworks.kr/tutorials/translate/virtual-dom/&quot; target=&quot;_blank&quot;&gt;돔과 가상돔의 차이점&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">jQuery와 Vue.js의 차이점 중 하나였던 돔(DOM)과 가상돔(Vuertual DOM)이 뭔지 알아보도록 하겠습니다.</summary></entry><entry><title type="html">jQuery VS Vue.js</title><link href="artemsheludko.pw/jQuery-VS-Vue-js/" rel="alternate" type="text/html" title="jQuery VS Vue.js" /><published>2017-09-17T20:00:43+09:00</published><updated>2017-09-17T20:00:43+09:00</updated><id>artemsheludko.pw/jQuery-VS-Vue-js</id><content type="html" xml:base="artemsheludko.pw/jQuery-VS-Vue-js/">&lt;p&gt;Front-End 기술면접을 보다보면 면접질문으로 jQuery와 Vue.js의 차이점을 물어보는 경우가 있습니다. 이 질문의 의도는 라이브러리와 프레임워크의 차이점을 알고 있는지에대해 물어보는 것이라 생각합니다.&lt;/p&gt;

&lt;h3 id=&quot;javascript-라이브러리&quot;&gt;JavaScript 라이브러리&lt;/h3&gt;
&lt;p&gt;우선, JavaScript의 라이브러리란 네이티브 스크립트에는 없는 함수(기능)들을 함수로 만들어서 묶어놓은 JavaScript 파일이라고 할 수 있습니다. 이런 라이브러리들은&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DOM 조작&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DOM 이벤트&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AJAX / 데이터 검색&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;효과 &amp;amp; 애니메이션&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HTML 템플릿&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;페이지 레이아웃&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UI 위젯&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;그래픽 &amp;amp; 차트&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;데이터 모델링&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;라우팅 &amp;amp; 탐색&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;접근성&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;다중 브라우저 지원&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;모바일 지원&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;등의 다양한 부분에 관하여 새로운 함수(기능)을 개발자들이 쓰기 편하도록 만들어져 있습니다.&lt;/p&gt;

&lt;p&gt;라이브러리에 따라 아주 작은부분의 역할만 하는 라이브러리는 미니라이브러리, 마이크로 라이브러리라고도 합니다.&lt;/p&gt;

&lt;p&gt;우리가 알아보고자하는 jQuery는 DOM API, 윈도우 메소드 기능들을 더 쉽게 사용할 수 있도록 도와주는 라이브러리입니다.&lt;/p&gt;

&lt;p&gt;그렇다면 비교해볼 Vue.js는 뭘까요?&lt;/p&gt;

&lt;h3 id=&quot;javascript-프레임워크&quot;&gt;JavaScript 프레임워크&lt;/h3&gt;
&lt;p&gt;Vue.js는 JavaScript 프레임워크 입니다. 프레임워크는 라이브러리와 달리 애플리케이션의 틀과 구조를 결정하고 그 위에 개발된 개발자의 코드를 제어합니다.&lt;/p&gt;

&lt;p&gt;프레임워크는 구체적이며 확장 가능한 기반 코드를 가지고 있으며, 설계자가 의도하는 여러 디자인 패턴의 집합으로 구성되어 있습니다.&lt;/p&gt;

&lt;p&gt;즉, 프레임워크는 설계의 기반이 되는 부분을 기술한 확장 가능한 기반 코드와
사용자가 이 코드를 자기 입맛대로 확장하는 데 필요한 라이브러리 이 두 가지 요소가 통합되어 제공되는 형태라고 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;결국 Vue.js를 사용하여 개발을 하면서 jQuery도 적용시켜 개발할 수 있는 것 입니다.&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;jquery와-vuejs의-다른-차이점&quot;&gt;jQuery와 Vue.js의 다른 차이점&lt;/h3&gt;
&lt;p&gt;지금까지 jQuery와 Vue.js의 가장 큰 차이점인 라이브러리와 프레임워크에 대해 알아봤습니다.&lt;/p&gt;

&lt;p&gt;그렇다면 본격적으로 jQuery와 Vue.js의 다른 차이점은 뭐가 있을까요?&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;strong&gt;분류&lt;/strong&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;strong&gt;jQuery&lt;/strong&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Vue.js&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;개발자&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;존 레식&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;에반뉴&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;배포날짜&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2006.06.30&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2014.02&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;종류&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;JavaScript 라이브러리&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;JavaScript  프레임워크&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;접근방식&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;실제 DOM에 접근&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;가상(Virtual) DOM에 접근&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;용량&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;270kb&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;76kb&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;속도(네이티브 스크립트)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;10배 느림&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.2배 느림&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;참고&quot;&gt;참고&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;http://webframeworks.kr/tutorials/translate/virtual-dom/&quot; target=&quot;_blank&quot;&gt;돔과 가상돔의 차이점&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;참고-1&quot;&gt;참고&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://mygumi.tistory.com/193&quot; target=&quot;_blank&quot;&gt;Vue.js 와 jQuery 공존하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jokergt.tistory.com/89&quot; target=&quot;_blank&quot;&gt;Gun’s Knowledge Base&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Front-End 기술면접을 보다보면 면접질문으로 jQuery와 Vue.js의 차이점을 물어보는 경우가 있습니다. 이 질문의 의도는 라이브러리와 프레임워크의 차이점을 알고 있는지에대해 물어보는 것이라 생각합니다.</summary></entry><entry><title type="html">시맨틱 마크업이란?</title><link href="artemsheludko.pw/Semantic-Markup/" rel="alternate" type="text/html" title="시맨틱 마크업이란?" /><published>2017-09-15T16:31:43+09:00</published><updated>2017-09-15T16:31:43+09:00</updated><id>artemsheludko.pw/Semantic-Markup</id><content type="html" xml:base="artemsheludko.pw/Semantic-Markup/">&lt;p&gt;특정 웹사이트를 검색했을 때 검색결과에 웹사이트가 나타나지 않는 경우를 경험해보셨나요?&lt;/p&gt;

&lt;p&gt;이런 사이트의 마크업을 보면 대체로 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt;로만 마크업이 되어있습니다.&lt;/p&gt;

&lt;p&gt;이렇게 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt;로만 작성된 사이트는 검색 봇이 &lt;code class=&quot;highlighter-rouge&quot;&gt;웹사이트의 타이틀과 내용 제대로 크롤링을 하지 못해서 검색에 노출되지 않습니다.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;사이트를 방문하는 사용자들의 &lt;code class=&quot;highlighter-rouge&quot;&gt;접근성을 생각한다면 시멘틱한 마크업으로 웹 사이트를 제작해야 할 필요&lt;/code&gt;가 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;시맨틱-마크업&quot;&gt;시맨틱 마크업&lt;/h3&gt;
&lt;p&gt;Semantic Markup은 &lt;code class=&quot;highlighter-rouge&quot;&gt;W3C에서 지정한 권고안에 맞도록 HTML을 구성하는 것&lt;/code&gt;입니다.&lt;/p&gt;

&lt;h3 id=&quot;시맨틱-마크업의-중요성&quot;&gt;시맨틱 마크업의 중요성&lt;/h3&gt;
&lt;p&gt;시멘틱 마크업은 &lt;code class=&quot;highlighter-rouge&quot;&gt;적절한 HTML요소를 올바르게 사용&lt;/code&gt;하는 것에서 시작합니다.&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;header&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Header&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;위의 마크업은 ‘id’, ‘내용’으로 이 ‘div’는 헤드부분이라고 사람은 인식되어지지만 검색 봇은 이를 인지하지 못합니다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;header&amp;gt;&lt;/span&gt;Header&lt;span class=&quot;nt&quot;&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;하지만 위의 마크업처럼 &lt;code class=&quot;highlighter-rouge&quot;&gt;W3C 권고안에 맞는 요소태그&lt;/code&gt;로 마크업을 하게 된다면 검색 봇은 위의 내용을 웹사이트의 &lt;code class=&quot;highlighter-rouge&quot;&gt;header부분이라고 안식&lt;/code&gt;하고 검색에 노출 시킬 수 있습니다.&lt;/p&gt;

&lt;p&gt;시멘틱 마크업은 검색에 노출시키는 것(SEO) 외에도 &lt;code class=&quot;highlighter-rouge&quot;&gt;웹 접근성 관점&lt;/code&gt;에서도 스크린리더기를 이용하는 장애인에게 &lt;code class=&quot;highlighter-rouge&quot;&gt;현재 탭이 위하고 있는 부분이 어떤 부분인지 정확하게 인식&lt;/code&gt;시켜 줍니다.&lt;/p&gt;

&lt;p&gt;또 &lt;code class=&quot;highlighter-rouge&quot;&gt;개발&lt;/code&gt;함에 있어서도 DOM Select부분에서 해당 &lt;code class=&quot;highlighter-rouge&quot;&gt;요소를 쉽게 선택&lt;/code&gt;할 수 있고 코드의 &lt;code class=&quot;highlighter-rouge&quot;&gt;가독성도 높아집니다.&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;시멘틱-마크업-태그의-종류&quot;&gt;시멘틱 마크업 태그의 종류&lt;/h3&gt;

&lt;h4 id=&quot;페이지의-구조를-잡는-태그들&quot;&gt;페이지의 구조를 잡는 태그들&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;header&amp;gt;&lt;/code&gt; 문서나 Section의 상단 정보 영역을 지정합니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;nav&amp;gt;&lt;/code&gt;	문서의 네비게이션을 지정합니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;main&amp;gt;&lt;/code&gt;	문서의 주 컨텐츠영역을 지정합니다. 한 번만 사용가능 하다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;section&amp;gt;&lt;/code&gt;	문단구분을 지정합니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;article&amp;gt;&lt;/code&gt;	독립된 컨텐츠영역을 지정합니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;aside&amp;gt;&lt;/code&gt;	페이지의 왼쪽 혹은 오른쪽에 위치한 컨텐츠영역을 지정합니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;footer&amp;gt;&lt;/code&gt; 문서나 Section의 하단 정보 영역을 지정합니다. 한 번만 사용가능 하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;tip&quot;&gt;Tip&lt;/h5&gt;
&lt;p&gt;페이지의 구조를 잡는 태그들은 각각 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;h1&amp;gt; ~ &amp;lt;h5&amp;gt;&lt;/code&gt;요소가 반드시 하나씩은 있어야 한다.&lt;/p&gt;

&lt;h4 id=&quot;구조안에서-세부영역을-잡는-태그들&quot;&gt;구조안에서 세부영역을 잡는 태그들&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;address&amp;gt;&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;footer&amp;gt;&lt;/code&gt;영역에서 사용 할 수 있으며 주소, 연락처와 관련된 정보를 기입한다. 한 웹에선 한 번만 사용가능하다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;bdi&amp;gt;&lt;/code&gt;	텍스트의 방향이 반대일 경우 사용합니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;details&amp;gt;&lt;/code&gt;	추가정보를 기술하는 영역을 지정합니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;dialog&amp;gt;&lt;/code&gt;	대화상자나 창을 지정하며 open속성을 사용하여 숨기거나 보이도록 할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;figcaption&amp;gt;&lt;/code&gt;	&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; 요소의 제목을 지정합니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;figure&amp;gt;&lt;/code&gt;	문서흐름상 이해를 위해 필요한 그림,동영상등을 포함할때 사용합니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;mark&amp;gt;&lt;/code&gt;	마크되거나 하이라이트된 텍스트.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;menuitem&amp;gt;&lt;/code&gt; 	팝업메뉴의 아이템을 지정합니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;meter&amp;gt;&lt;/code&gt;	설정된 범위안에 특정값을 막대그래프식으로 표현합니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;progress&amp;gt;&lt;/code&gt;	&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;meter&amp;gt;&lt;/code&gt;태그와 비슷하게 동작하며 현재 진행되고 있는 수치를 보여줍니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;rp&amp;gt;&lt;/code&gt;	&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;rt&amp;gt;&lt;/code&gt;태그가 지원되지않는 브라우저를 위해 사용합니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;rt&amp;gt;&lt;/code&gt;	&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ruby&amp;gt;&lt;/code&gt;태그와 같이 사용합니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ruby&amp;gt;&lt;/code&gt;	일본어나 중국어에서 글자위에 글자를 쓸때 사용합니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;summary&amp;gt;&lt;/code&gt;	&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;details&amp;gt;&lt;/code&gt; 요소안에서 제목이나 요약등의 내용을 포함합니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;time&amp;gt;&lt;/code&gt;	날짜/시간 표현&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;wbr&amp;gt;&lt;/code&gt;	줄바꿈위치를 지정합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;참고&quot;&gt;참고&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://misofamily.com/2&quot; target=&quot;_blank&quot;&gt;MisoFamily&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">특정 웹사이트를 검색했을 때 검색결과에 웹사이트가 나타나지 않는 경우를 경험해보셨나요?</summary></entry><entry><title type="html">웹 표준이란?</title><link href="artemsheludko.pw/Web-Standard/" rel="alternate" type="text/html" title="웹 표준이란?" /><published>2017-09-14T13:02:43+09:00</published><updated>2017-09-14T13:02:43+09:00</updated><id>artemsheludko.pw/Web-Standard</id><content type="html" xml:base="artemsheludko.pw/Web-Standard/">&lt;p&gt;하나의 &lt;code class=&quot;highlighter-rouge&quot;&gt;웹문서가 IE, 크롬, 사파리, 오페라...등등 다양한 브라우저(브라우저엔진)에서 완전히 같은 모습으로 보이는 것은 불가능합니다.&lt;/code&gt; 그렇다면 최대한 비슷하게 만들기 위해선 어떻게 해야할까요?&lt;/p&gt;

&lt;h3 id=&quot;웹-표준&quot;&gt;웹 표준&lt;/h3&gt;
&lt;p&gt;이 문제를 해결하기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;W3C(World Wide Web Consortium)&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;표준안&lt;/code&gt;을 지정했습니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;표준안&lt;/code&gt;에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;HTML, CSS, JavaScript 등에 대한 규칙&lt;/code&gt;들을 담고 있습니다.&lt;/p&gt;

&lt;p&gt;이 표준안을 지켜 웹사이트를 제작하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;어떤 운영체제나 웹브라우저 상에서도 비교적 동일한 디자인과 기능을 구현&lt;/code&gt;할 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;웹-표준-장점&quot;&gt;웹 표준 장점&lt;/h3&gt;
&lt;p&gt;웹표준을 지키면 부단 어느 브라우저에서나 비슷하게 보이는 것 뿐만아니라 다양한 장점이 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;수정 및 운영관리 용이&lt;/code&gt;&lt;/strong&gt; : 
콘텐츠의 올바른 구조화와 CSS로 시각표현을 통일하여 제어하게 되어 &lt;code class=&quot;highlighter-rouge&quot;&gt;페이지 제작의 부담 감소 및 관리가 용이하다.&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;접근성 향상&lt;/code&gt;&lt;/strong&gt; :
웹 표준을 이용해 작성한 문서는 다양한 브라우징 환경에 대응이 가능하며 &lt;code class=&quot;highlighter-rouge&quot;&gt;휴대폰, PDA에서도 정상적인 작동 및 
장애인 지원용 프로그램에도 도움&lt;/code&gt;이 되므로 사용자나 접속 장치의 접근성이 용이하다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;검색엔진 최적화(SEO)&lt;/code&gt;&lt;/strong&gt; :
구조화된 웹페이지는 검색 로봇 수집을 통해 &lt;code class=&quot;highlighter-rouge&quot;&gt;검색엔진에 효율적으로 노출&lt;/code&gt; 될 수 있도록 검색엔진의 검색결과를 최적화된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;File Size 축소, 서버 저장 공간 절약&lt;/code&gt;&lt;/strong&gt; :
효율적인 소스 작성은 &lt;code class=&quot;highlighter-rouge&quot;&gt;파일 사이즈와 서버공간을 절약&lt;/code&gt;할 수 있으며 동시에 &lt;code class=&quot;highlighter-rouge&quot;&gt;화면표시에 소요되는 시간을 단축된다.&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;효율적인 마크업&lt;/code&gt;&lt;/strong&gt; :
CSS와 HTML문서를 분리하여 제작할 경우 불필요한 마크업이 최소화되어 &lt;code class=&quot;highlighter-rouge&quot;&gt;페이지 로딩속도 향상된다.&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;호환성 가능&lt;/code&gt;&lt;/strong&gt; :
기존 IE브라우저에서만 작동이 가능했던 요소들이 웹 표준을 준수함으로써 &lt;code class=&quot;highlighter-rouge&quot;&gt;다양한 브라우저대응이 가능하다.&lt;/code&gt;
(크롬, 파이어폭스, 사파리, 오페라 등)에서도 작동된다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;웹-표준의-필요성&quot;&gt;웹 표준의 필요성&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www.thisisgame.com/webzine/nboard/213/?n=56672&quot; target=&quot;_blank&quot;&gt;웹 표준이 중요한 이유 - 웹툰&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;웹-표준을-검증하는-서비스&quot;&gt;웹 표준을 검증하는 서비스&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://validator.kldp.org/&quot; target=&quot;_blank&quot;&gt;W3C Mark Up 검증 서비스&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jigsaw.w3.org/css-validator/&quot; target=&quot;_blank&quot;&gt;W3C CSS Validation 서비스&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;참고&quot;&gt;참고&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www.smartebiz.kr/new/subpage02_02.html&quot; target=&quot;_blank&quot;&gt;웹발전 연구소&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://webdir.tistory.com/34&quot; target=&quot;_blank&quot;&gt;WEBDIR&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">하나의 웹문서가 IE, 크롬, 사파리, 오페라...등등 다양한 브라우저(브라우저엔진)에서 완전히 같은 모습으로 보이는 것은 불가능합니다. 그렇다면 최대한 비슷하게 만들기 위해선 어떻게 해야할까요?</summary></entry><entry><title type="html">웹 접근성이란?</title><link href="artemsheludko.pw/Web-Accessibility/" rel="alternate" type="text/html" title="웹 접근성이란?" /><published>2017-09-13T11:03:43+09:00</published><updated>2017-09-13T11:03:43+09:00</updated><id>artemsheludko.pw/Web-Accessibility</id><content type="html" xml:base="artemsheludko.pw/Web-Accessibility/">&lt;p&gt;우리가 살아가고있는 21세기에는 남녀불평등, 인종차별, 장애인차별등의 인권문제를 해결하기위한 노력을 하고 있습니다. 웹 접근성은 이런 흐름의 하나로 장애뿐만 아닌 모든 사람의 인권을 보장하고자하는 노력입니다.&lt;/p&gt;

&lt;h3 id=&quot;웹-접근성&quot;&gt;웹 접근성&lt;/h3&gt;
&lt;p&gt;웹 접근성이란 &lt;code class=&quot;highlighter-rouge&quot;&gt;남녀노소, 장애에 구분 없이 웹 사이트에서 제공하는 정보에 동등하게 접근하고 이해할 수 있도록 보장&lt;/code&gt;하는 것입니다.&lt;/p&gt;

&lt;p&gt;WWW(World Wide Web)의 창시자 &lt;code class=&quot;highlighter-rouge&quot;&gt;팀 버너스 리&lt;/code&gt; 또한 웹을 &lt;code class=&quot;highlighter-rouge&quot;&gt;'장애에 구애 없이 모든 사람들이 손쉽게 정보를 공유할 수 있는 공간'&lt;/code&gt; 이라고 정의 한 바 있습니다.&lt;/p&gt;

&lt;p&gt;하지만 정작 웹 접근성을 지키고 있는 웹 사이트는 많지 않고 &lt;code class=&quot;highlighter-rouge&quot;&gt;대부분의 웹 사이트는 웹 접근성을 지키지 않고 무시&lt;/code&gt;하고 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;웹-접근성의-필요성&quot;&gt;웹 접근성의 필요성&lt;/h3&gt;
&lt;p&gt;그렇다면 왜 웹 접근성을 지켜야 하는 것일까요?&lt;/p&gt;

&lt;p&gt;웹 접근성 보장은 &lt;code class=&quot;highlighter-rouge&quot;&gt;「국가정보화기본법」과 「장애인차별금지 및 권리구제 등에 관한 법률(이하 &quot;장애인차별금지법&quot;)」&lt;/code&gt;등 법률에 명시된 &lt;code class=&quot;highlighter-rouge&quot;&gt;의무사항&lt;/code&gt;입니다.&lt;/p&gt;

&lt;p&gt;또 한국정보화진흥원의 2013 정보격차지수 및 실태조사보고서에 따르면 &lt;code class=&quot;highlighter-rouge&quot;&gt;인터넷이용률은 장애인 56.7%, 고령자 48.5%&lt;/code&gt;으로 절반의 장애인과 고령자가 인터넷을 이용하고 있다는 것을 알 수 있습니다.&lt;/p&gt;

&lt;p&gt;이렇게 법으로도 지정되어 있을 뿐만 아니라 전체 장애인, 고령자의 절반이나 되는 사람들이 인터넷을 이용하고 있고 &lt;code class=&quot;highlighter-rouge&quot;&gt;웹 접근성을 지키지 못 한 웹사이트 때문에 차별을 비장애인과의 차별을 당하고 있습니다.&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;웹-접근성을-지키지-못-한-사례&quot;&gt;웹 접근성을 지키지 못 한 사례&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;웹 접근성을 지키지 못해 차별을 당한 사례&lt;/code&gt;는 우리 주변에서 흔히 사용하는 웹사이트에서 찾아 볼 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ablenews.co.kr/News/NewsContent.aspx?CategoryCode=0014&amp;amp;NewsCode=001420170907162736910979&quot; target=&quot;_blank&quot;&gt;에이블뉴스 : 시각장애인들, 온라인몰 3곳 대상 집단소송&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ablenews.co.kr/News/Include/NewsContentInc.aspx?CategoryCode=0011&amp;amp;NewsCode=001120170907173907885715&quot; target=&quot;_blank&quot;&gt;에이블뉴스 : 코레일, 장애인을 진정 소비자로 인식은 하나&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.newstomato.com/ReadNews.aspx?no=749072&quot; target=&quot;_blank&quot;&gt;토마토뉴스 : 인터넷 쇼핑 천국? 장애인에겐 ‘그림의 떡’&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;웹-접근성의-4대-원칙&quot;&gt;웹 접근성의 4대 원칙&lt;/h3&gt;
&lt;p&gt;그렇다면 어떻게 해야 웹 접근성을 지킬 수 있을까요?&lt;/p&gt;

&lt;p&gt;웹 접근성은 4가지 원칙을 가지고 지켜야 합니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;인식의 용이성 (Perceivable)&lt;/code&gt;&lt;/strong&gt; : 모든 콘텐츠는 사용자가 인식할 수 있어야 한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;운용의 용이성(Operable)&lt;/code&gt;&lt;/strong&gt; : 사용자 인터페이스 구성요소는 조작 가능하고 내비게이션 할 수 있어야 한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;이해의 용이성(Understandable)&lt;/code&gt;&lt;/strong&gt; : 콘텐츠는 이해할 수 있어야 한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;견고성(Robust)&lt;/code&gt;&lt;/strong&gt; : 웹 콘텐츠는 미래의 기술로도 접근할 수 있도록 견고하게 만들어야 한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;저시력장애인을-위한-wai-aria&quot;&gt;저시력장애인을 위한 WAI-ARIA&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/Accessibility/ARIA&quot;&gt;MDN - ARIA&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;wa마크&quot;&gt;WA마크&lt;/h3&gt;
&lt;p&gt;웹 접근성을 지키기위한 노력으로는 국가에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;웹 접근성을 지킨 웹사이트라는 증거로 WA마크를 부여&lt;/code&gt;하는 정책이 있습니다.&lt;/p&gt;

&lt;p&gt;WA마크는 「국가정보화기본법」 제32조의2 및 동법 시행규칙 제3조의3에 의거 과학기술정보통신부에서 지정한 &lt;code class=&quot;highlighter-rouge&quot;&gt;웹 접근성준수 마크&lt;/code&gt; 입니다.&lt;/p&gt;

&lt;p&gt;인증의 &lt;code class=&quot;highlighter-rouge&quot;&gt;유효기간은 1년이며 매년마다 갱신이 필요&lt;/code&gt;합니다.&lt;/p&gt;

&lt;p&gt;WA마크를 부여함으로 인해 기대하는 효과로는&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;접근성 준수 향상을 통해 &lt;code class=&quot;highlighter-rouge&quot;&gt;지식정보사회의 정보접근권 제고&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;고객 신뢰도 및 만족도 제고와 사회적 공헌&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;국내 &lt;code class=&quot;highlighter-rouge&quot;&gt;웹 개발 환경 개선 및 관련 기술 발전&lt;/code&gt; 촉진
이 있습니다.
&lt;img src=&quot;http://webwatch.or.kr/imgs/2014_WA_mark2.jpg&quot; alt=&quot;WA마크&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;참고&quot;&gt;참고&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;http://www.wah.or.kr/&quot; target=&quot;_blank&quot;&gt;웹 접근성 연구소&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.websoul.co.kr/&quot; target=&quot;_blank&quot;&gt;Web Soul Lab&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">우리가 살아가고있는 21세기에는 남녀불평등, 인종차별, 장애인차별등의 인권문제를 해결하기위한 노력을 하고 있습니다. 웹 접근성은 이런 흐름의 하나로 장애뿐만 아닌 모든 사람의 인권을 보장하고자하는 노력입니다.</summary></entry><entry><title type="html">DOCTYPE 이란?</title><link href="artemsheludko.pw/DOCTYPE/" rel="alternate" type="text/html" title="DOCTYPE 이란?" /><published>2017-09-12T10:08:43+09:00</published><updated>2017-09-12T10:08:43+09:00</updated><id>artemsheludko.pw/DOCTYPE</id><content type="html" xml:base="artemsheludko.pw/DOCTYPE/">&lt;h3 id=&quot;doctypedtd&quot;&gt;DOCTYPE(DTD)&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DOCTYPE&lt;/code&gt;은 HTML문서의 버전을 미리 선언하여 지원하는 요소나 속성들을 &lt;strong&gt;어떤 웹브라우저라도 제대로 표현&lt;/strong&gt;할 수 있도록하는 선언문입니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HTML 4.01&lt;/code&gt;의 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;SGML&lt;/code&gt;을 기반으로 되어있어서 HTML 4.01에서 &amp;lt;! DOCTYPE&amp;gt; 선언은 &lt;code class=&quot;highlighter-rouge&quot;&gt;DTD&lt;/code&gt;참조를 해야합니다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;하지만 &lt;code class=&quot;highlighter-rouge&quot;&gt;HTML5&lt;/code&gt;는 SGML을 기반이 아니기때문에 &lt;strong&gt;DTD의 참조를 필요로하지 않습니다.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- HTML5의 문서선언 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;브라우저는 선언된 doctype에 따라 렌더링할 모드를 선택하게 되는데 이 과정을 &lt;code class=&quot;highlighter-rouge&quot;&gt;doctype sniffing&lt;/code&gt; 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;doctype switching&lt;/code&gt;이라고 합니다.&lt;/p&gt;

&lt;p&gt;참고&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/SGML&quot;&gt;SGML(Standard Generalized Markup Language)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/%EB%AC%B8%EC%84%9C_%ED%98%95%EC%8B%9D_%EC%A0%95%EC%9D%98&quot;&gt;DTD(Document Type Definition)&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;doctype을-선언하지-않았을-경우&quot;&gt;DOCTYPE을 선언하지 않았을 경우?&lt;/h3&gt;
&lt;p&gt;HTML문서에서 DOCTYPE을 선언하지 않았을 경우에는&lt;code class=&quot;highlighter-rouge&quot;&gt;Quirks Mode(쿼크모드)&lt;/code&gt;로 랜더링 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Quirks Mode&lt;/code&gt;: 옛 버전의 브라우저(HTML2 ~ HTML4)를 웹페이지의 CSS(Design)를 유지하기 위해 쓰는 웹 브라우저 기술.&lt;/p&gt;

&lt;p&gt;IE(Internet Explorer)의 &lt;code class=&quot;highlighter-rouge&quot;&gt;호환성 보기 헤더(X-UA-Compatible header)&lt;/code&gt;가 설정되지 않을 경우에도 html문서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Quicks Mode&lt;/code&gt;로 변경됩니다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;http-equiv=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-UA-Compatible&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;IE=Edge&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;doctypedtd의-필요성&quot;&gt;DOCTYPE(DTD)의 필요성&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;문서의 가독성 증가&lt;/li&gt;
  &lt;li&gt;브라우저 별 호환성 증가(크로스 브라우징)&lt;/li&gt;
  &lt;li&gt;문서 제작의 효율성 증가&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;html-mode&quot;&gt;HTML Mode&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Strict DTD&lt;/code&gt; :
W3C가 스타일시트 사용을 장려하기 위해 단계적으로 사라질 ‘표현’(presentation)에 관한 태그와 속성을 배제한 문서 타입입니다. 웹 문서 제작자는 가능하다면 Strict 타입을 사용해야 하지만(should), 불가피하게 표현을 담당하는 속성이 필요할 경우에는 Transitional 타입을 사용할 수도 있습니다.&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD &quot;+ XHTML 버전 +&quot; Strict//EN&quot; &quot;http://www.w3.org/TR/xhtml1-strict.dtd&quot;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Transitional DTD&lt;/code&gt; :
HTML이전 버전들과의 호환성을 위한 문서 타입입니다. iframe과 새창띄우기(target=”_blank”)등을 사용할 수 있어 XHTML 사용시 이것을 추천합니다.&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD &quot;+ XHTML 버전 +&quot; Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1-transitional.dtd&quot;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Frameset DTD&lt;/code&gt; :
Transitional DTD 기반 위에 프레임 지원을 위한 태그와 속성을 추가한 문서 타입입니다.&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD &quot;+ XHTML 버전 +&quot;Frameset//EN&quot; &quot;http://www.w3.org/TR/xhtml1-frameset.dtd&quot;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;XHTML 프롤로그(선언문)&lt;/code&gt; :
모든 XML문서는 XML 해석 방법을 브라우저에게 말하는 선언문에서 시작된다. XML 선언문 또는 프롤로그는 DOCTYPE과 네임스페이스 선언, 그리고 문서의 타입 또는 마크업 랭귀지를 정의하는 것에 앞서서 정의됩니다.&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;참고&quot;&gt;참고&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/uchang7194/FDS-Study/blob/master/DAY01/HTML_Structure.md&quot; target=&quot;_blank&quot;&gt;uchang7194의 깃헙&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://webdir.tistory.com/40&quot; target=&quot;_blank&quot;&gt;흉내쟁이 블로그&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">DOCTYPE(DTD) DOCTYPE은 HTML문서의 버전을 미리 선언하여 지원하는 요소나 속성들을 어떤 웹브라우저라도 제대로 표현할 수 있도록하는 선언문입니다.</summary></entry></feed>